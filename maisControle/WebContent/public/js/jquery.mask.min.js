///*
//    jQuery Masked Input Plugin
//    Copyright (c) 2007 - 2015 Josh Bush (digitalbush.com)
//    Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license)
//    Version: 1.4.1
//*/
//!function(factory) {
//    "function" == typeof define && define.amd ? define([ "jquery" ], factory) : factory("object" == typeof exports ? require("jquery") : jQuery);
//}(function($) {
//    var caretTimeoutId, ua = navigator.userAgent, iPhone = /iphone/i.test(ua), chrome = /chrome/i.test(ua), android = /android/i.test(ua);
//    $.mask = {
//        definitions: {
//            "9": "[0-9]",
//            a: "[A-Za-z]",
//            "*": "[A-Za-z0-9]"
//        },
//        autoclear: !0,
//        dataName: "rawMaskFn",
//        placeholder: "_"
//    }, $.fn.extend({
//        caret: function(begin, end) {
//            var range;
//            if (0 !== this.length && !this.is(":hidden")) return "number" == typeof begin ? (end = "number" == typeof end ? end : begin, 
//            this.each(function() {
//                this.setSelectionRange ? this.setSelectionRange(begin, end) : this.createTextRange && (range = this.createTextRange(), 
//                range.collapse(!0), range.moveEnd("character", end), range.moveStart("character", begin), 
//                range.select());
//            })) : (this[0].setSelectionRange ? (begin = this[0].selectionStart, end = this[0].selectionEnd) : document.selection && document.selection.createRange && (range = document.selection.createRange(), 
//            begin = 0 - range.duplicate().moveStart("character", -1e5), end = begin + range.text.length), 
//            {
//                begin: begin,
//                end: end
//            });
//        },
//        unmask: function() {
//            return this.trigger("unmask");
//        },
//        mask: function(mask, settings) {
//            var input, defs, tests, partialPosition, firstNonMaskPos, lastRequiredNonMaskPos, len, oldVal;
//            if (!mask && this.length > 0) {
//                input = $(this[0]);
//                var fn = input.data($.mask.dataName);
//                return fn ? fn() : void 0;
//            }
//            return settings = $.extend({
//                autoclear: $.mask.autoclear,
//                placeholder: $.mask.placeholder,
//                completed: null
//            }, settings), defs = $.mask.definitions, tests = [], partialPosition = len = mask.length, 
//            firstNonMaskPos = null, $.each(mask.split(""), function(i, c) {
//                "?" == c ? (len--, partialPosition = i) : defs[c] ? (tests.push(new RegExp(defs[c])), 
//                null === firstNonMaskPos && (firstNonMaskPos = tests.length - 1), partialPosition > i && (lastRequiredNonMaskPos = tests.length - 1)) : tests.push(null);
//            }), this.trigger("unmask").each(function() {
//                function tryFireCompleted() {
//                    if (settings.completed) {
//                        for (var i = firstNonMaskPos; lastRequiredNonMaskPos >= i; i++) if (tests[i] && buffer[i] === getPlaceholder(i)) return;
//                        settings.completed.call(input);
//                    }
//                }
//                function getPlaceholder(i) {
//                    return settings.placeholder.charAt(i < settings.placeholder.length ? i : 0);
//                }
//                function seekNext(pos) {
//                    for (;++pos < len && !tests[pos]; ) ;
//                    return pos;
//                }
//                function seekPrev(pos) {
//                    for (;--pos >= 0 && !tests[pos]; ) ;
//                    return pos;
//                }
//                function shiftL(begin, end) {
//                    var i, j;
//                    if (!(0 > begin)) {
//                        for (i = begin, j = seekNext(end); len > i; i++) if (tests[i]) {
//                            if (!(len > j && tests[i].test(buffer[j]))) break;
//                            buffer[i] = buffer[j], buffer[j] = getPlaceholder(j), j = seekNext(j);
//                        }
//                        writeBuffer(), input.caret(Math.max(firstNonMaskPos, begin));
//                    }
//                }
//                function shiftR(pos) {
//                    var i, c, j, t;
//                    for (i = pos, c = getPlaceholder(pos); len > i; i++) if (tests[i]) {
//                        if (j = seekNext(i), t = buffer[i], buffer[i] = c, !(len > j && tests[j].test(t))) break;
//                        c = t;
//                    }
//                }
//                function androidInputEvent() {
//                    var curVal = input.val(), pos = input.caret();
//                    if (oldVal && oldVal.length && oldVal.length > curVal.length) {
//                        for (checkVal(!0); pos.begin > 0 && !tests[pos.begin - 1]; ) pos.begin--;
//                        if (0 === pos.begin) for (;pos.begin < firstNonMaskPos && !tests[pos.begin]; ) pos.begin++;
//                        input.caret(pos.begin, pos.begin);
//                    } else {
//                        for (checkVal(!0); pos.begin < len && !tests[pos.begin]; ) pos.begin++;
//                        input.caret(pos.begin, pos.begin);
//                    }
//                    tryFireCompleted();
//                }
//                function blurEvent() {
//                    checkVal(), input.val() != focusText && input.change();
//                }
//                function keydownEvent(e) {
//                    if (!input.prop("readonly")) {
//                        var pos, begin, end, k = e.which || e.keyCode;
//                        oldVal = input.val(), 8 === k || 46 === k || iPhone && 127 === k ? (pos = input.caret(), 
//                        begin = pos.begin, end = pos.end, end - begin === 0 && (begin = 46 !== k ? seekPrev(begin) : end = seekNext(begin - 1), 
//                        end = 46 === k ? seekNext(end) : end), clearBuffer(begin, end), shiftL(begin, end - 1), 
//                        e.preventDefault()) : 13 === k ? blurEvent.call(this, e) : 27 === k && (input.val(focusText), 
//                        input.caret(0, checkVal()), e.preventDefault());
//                    }
//                }
//                function keypressEvent(e) {
//                    if (!input.prop("readonly")) {
//                        var p, c, next, k = e.which || e.keyCode, pos = input.caret();
//                        if (!(e.ctrlKey || e.altKey || e.metaKey || 32 > k) && k && 13 !== k) {
//                            if (pos.end - pos.begin !== 0 && (clearBuffer(pos.begin, pos.end), shiftL(pos.begin, pos.end - 1)), 
//                            p = seekNext(pos.begin - 1), len > p && (c = String.fromCharCode(k), tests[p].test(c))) {
//                                if (shiftR(p), buffer[p] = c, writeBuffer(), next = seekNext(p), android) {
//                                    var proxy = function() {
//                                        $.proxy($.fn.caret, input, next)();
//                                    };
//                                    setTimeout(proxy, 0);
//                                } else input.caret(next);
//                                pos.begin <= lastRequiredNonMaskPos && tryFireCompleted();
//                            }
//                            e.preventDefault();
//                        }
//                    }
//                }
//                function clearBuffer(start, end) {
//                    var i;
//                    for (i = start; end > i && len > i; i++) tests[i] && (buffer[i] = getPlaceholder(i));
//                }
//                function writeBuffer() {
//                    input.val(buffer.join(""));
//                }
//                function checkVal(allow) {
//                    var i, c, pos, test = input.val(), lastMatch = -1;
//                    for (i = 0, pos = 0; len > i; i++) if (tests[i]) {
//                        for (buffer[i] = getPlaceholder(i); pos++ < test.length; ) if (c = test.charAt(pos - 1), 
//                        tests[i].test(c)) {
//                            buffer[i] = c, lastMatch = i;
//                            break;
//                        }
//                        if (pos > test.length) {
//                            clearBuffer(i + 1, len);
//                            break;
//                        }
//                    } else buffer[i] === test.charAt(pos) && pos++, partialPosition > i && (lastMatch = i);
//                    return allow ? writeBuffer() : partialPosition > lastMatch + 1 ? settings.autoclear || buffer.join("") === defaultBuffer ? (input.val() && input.val(""), 
//                    clearBuffer(0, len)) : writeBuffer() : (writeBuffer(), input.val(input.val().substring(0, lastMatch + 1))), 
//                    partialPosition ? i : firstNonMaskPos;
//                }
//                var input = $(this), buffer = $.map(mask.split(""), function(c, i) {
//                    return "?" != c ? defs[c] ? getPlaceholder(i) : c : void 0;
//                }), defaultBuffer = buffer.join(""), focusText = input.val();
//                input.data($.mask.dataName, function() {
//                    return $.map(buffer, function(c, i) {
//                        return tests[i] && c != getPlaceholder(i) ? c : null;
//                    }).join("");
//                }), input.one("unmask", function() {
//                    input.off(".mask").removeData($.mask.dataName);
//                }).on("focus.mask", function() {
//                    if (!input.prop("readonly")) {
//                        clearTimeout(caretTimeoutId);
//                        var pos;
//                        focusText = input.val(), pos = checkVal(), caretTimeoutId = setTimeout(function() {
//                            input.get(0) === document.activeElement && (writeBuffer(), pos == mask.replace("?", "").length ? input.caret(0, pos) : input.caret(pos));
//                        }, 10);
//                    }
//                }).on("blur.mask", blurEvent).on("keydown.mask", keydownEvent).on("keypress.mask", keypressEvent).on("input.mask paste.mask", function() {
//                    input.prop("readonly") || setTimeout(function() {
//                        var pos = checkVal(!0);
//                        input.caret(pos), tryFireCompleted();
//                    }, 0);
//                }), chrome && android && input.off("input.mask").on("input.mask", androidInputEvent), 
//                checkVal();
//            });
//        }
//    });
//});
// jQuery Mask Plugin v1.14.0
// github.com/igorescobar/jQuery-Mask-Plugin
(function(b){"function"===typeof define&&define.amd?define(["jquery"],b):"object"===typeof exports?module.exports=b(require("jquery")):b(jQuery||Zepto)})(function(b){var y=function(a,e,d){var c={invalid:[],getCaret:function(){try{var r,b=0,e=a.get(0),d=document.selection,f=e.selectionStart;if(d&&-1===navigator.appVersion.indexOf("MSIE 10"))r=d.createRange(),r.moveStart("character",-c.val().length),b=r.text.length;else if(f||"0"===f)b=f;return b}catch(g){}},setCaret:function(r){try{if(a.is(":focus")){var c,
b=a.get(0);b.setSelectionRange?(b.focus(),b.setSelectionRange(r,r)):(c=b.createTextRange(),c.collapse(!0),c.moveEnd("character",r),c.moveStart("character",r),c.select())}}catch(e){}},events:function(){a.on("keydown.mask",function(c){a.data("mask-keycode",c.keyCode||c.which)}).on(b.jMaskGlobals.useInput?"input.mask":"keyup.mask",c.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){a.keydown().keyup()},100)}).on("change.mask",function(){a.data("changed",!0)}).on("blur.mask",function(){n===
c.val()||a.data("changed")||a.trigger("change");a.data("changed",!1)}).on("blur.mask",function(){n=c.val()}).on("focus.mask",function(a){!0===d.selectOnFocus&&b(a.target).select()}).on("focusout.mask",function(){d.clearIfNotMatch&&!p.test(c.val())&&c.val("")})},getRegexMask:function(){for(var a=[],c,b,d,f,l=0;l<e.length;l++)(c=g.translation[e.charAt(l)])?(b=c.pattern.toString().replace(/.{1}$|^.{1}/g,""),d=c.optional,(c=c.recursive)?(a.push(e.charAt(l)),f={digit:e.charAt(l),pattern:b}):a.push(d||
c?b+"?":b)):a.push(e.charAt(l).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));a=a.join("");f&&(a=a.replace(new RegExp("("+f.digit+"(.*"+f.digit+")?)"),"($1)?").replace(new RegExp(f.digit,"g"),f.pattern));return new RegExp(a)},destroyEvents:function(){a.off("input keydown keyup paste drop blur focusout ".split(" ").join(".mask "))},val:function(c){var b=a.is("input")?"val":"text";if(0<arguments.length){if(a[b]()!==c)a[b](c);b=a}else b=a[b]();return b},getMCharsBeforeCount:function(a,c){for(var b=0,d=0,
f=e.length;d<f&&d<a;d++)g.translation[e.charAt(d)]||(a=c?a+1:a,b++);return b},caretPos:function(a,b,d,h){return g.translation[e.charAt(Math.min(a-1,e.length-1))]?Math.min(a+d-b-h,d):c.caretPos(a+1,b,d,h)},behaviour:function(d){d=d||window.event;c.invalid=[];var e=a.data("mask-keycode");if(-1===b.inArray(e,g.byPassKeys)){var m=c.getCaret(),h=c.val().length,f=c.getMasked(),l=f.length,k=c.getMCharsBeforeCount(l-1)-c.getMCharsBeforeCount(h-1),n=m<h;c.val(f);n&&(8!==e&&46!==e&&(m=c.caretPos(m,h,l,k)),
c.setCaret(m));return c.callbacks(d)}},getMasked:function(a,b){var m=[],h=void 0===b?c.val():b+"",f=0,l=e.length,k=0,n=h.length,q=1,p="push",u=-1,t,w;d.reverse?(p="unshift",q=-1,t=0,f=l-1,k=n-1,w=function(){return-1<f&&-1<k}):(t=l-1,w=function(){return f<l&&k<n});for(;w();){var x=e.charAt(f),v=h.charAt(k),s=g.translation[x];if(s)v.match(s.pattern)?(m[p](v),s.recursive&&(-1===u?u=f:f===t&&(f=u-q),t===u&&(f-=q)),f+=q):s.optional?(f+=q,k-=q):s.fallback?(m[p](s.fallback),f+=q,k-=q):c.invalid.push({p:k,
v:v,e:s.pattern}),k+=q;else{if(!a)m[p](x);v===x&&(k+=q);f+=q}}h=e.charAt(t);l!==n+1||g.translation[h]||m.push(h);return m.join("")},callbacks:function(b){var g=c.val(),m=g!==n,h=[g,b,a,d],f=function(a,b,c){"function"===typeof d[a]&&b&&d[a].apply(this,c)};f("onChange",!0===m,h);f("onKeyPress",!0===m,h);f("onComplete",g.length===e.length,h);f("onInvalid",0<c.invalid.length,[g,b,a,c.invalid,d])}};a=b(a);var g=this,n=c.val(),p;e="function"===typeof e?e(c.val(),void 0,a,d):e;g.mask=e;g.options=d;g.remove=
function(){var b=c.getCaret();c.destroyEvents();c.val(g.getCleanVal());c.setCaret(b-c.getMCharsBeforeCount(b));return a};g.getCleanVal=function(){return c.getMasked(!0)};g.getMaskedVal=function(a){return c.getMasked(!1,a)};g.init=function(e){e=e||!1;d=d||{};g.clearIfNotMatch=b.jMaskGlobals.clearIfNotMatch;g.byPassKeys=b.jMaskGlobals.byPassKeys;g.translation=b.extend({},b.jMaskGlobals.translation,d.translation);g=b.extend(!0,{},g,d);p=c.getRegexMask();!1===e?(d.placeholder&&a.attr("placeholder",d.placeholder),
a.data("mask")&&a.attr("autocomplete","off"),c.destroyEvents(),c.events(),e=c.getCaret(),c.val(c.getMasked()),c.setCaret(e+c.getMCharsBeforeCount(e,!0))):(c.events(),c.val(c.getMasked()))};g.init(!a.is("input"))};b.maskWatchers={};var A=function(){var a=b(this),e={},d=a.attr("data-mask");a.attr("data-mask-reverse")&&(e.reverse=!0);a.attr("data-mask-clearifnotmatch")&&(e.clearIfNotMatch=!0);"true"===a.attr("data-mask-selectonfocus")&&(e.selectOnFocus=!0);if(z(a,d,e))return a.data("mask",new y(this,
d,e))},z=function(a,e,d){d=d||{};var c=b(a).data("mask"),g=JSON.stringify;a=b(a).val()||b(a).text();try{return"function"===typeof e&&(e=e(a)),"object"!==typeof c||g(c.options)!==g(d)||c.mask!==e}catch(n){}};b.fn.mask=function(a,e){e=e||{};var d=this.selector,c=b.jMaskGlobals,g=c.watchInterval,c=e.watchInputs||c.watchInputs,n=function(){if(z(this,a,e))return b(this).data("mask",new y(this,a,e))};b(this).each(n);d&&""!==d&&c&&(clearInterval(b.maskWatchers[d]),b.maskWatchers[d]=setInterval(function(){b(document).find(d).each(n)},
g));return this};b.fn.masked=function(a){return this.data("mask").getMaskedVal(a)};b.fn.unmask=function(){clearInterval(b.maskWatchers[this.selector]);delete b.maskWatchers[this.selector];return this.each(function(){var a=b(this).data("mask");a&&a.remove().removeData("mask")})};b.fn.cleanVal=function(){return this.data("mask").getCleanVal()};b.applyDataMask=function(a){a=a||b.jMaskGlobals.maskElements;(a instanceof b?a:b(a)).filter(b.jMaskGlobals.dataMaskAttr).each(A)};var p={maskElements:"input,td,span,div",
dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,useInput:function(a){var b=document.createElement("div"),d;a="on"+a;d=a in b;d||(b.setAttribute(a,"return;"),d="function"===typeof b[a]);return d}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};b.jMaskGlobals=b.jMaskGlobals||{};p=b.jMaskGlobals=b.extend(!0,{},p,b.jMaskGlobals);
p.dataMask&&b.applyDataMask();setInterval(function(){b.jMaskGlobals.watchDataMask&&b.applyDataMask()},p.watchInterval)});
